/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package co.edu.usbcali.overlappingCommunitiesViewer.filter;

import co.edu.usbcali.overlappingCommunitiesViewer.generator.model.FiltersValues;
import co.edu.usbcali.overlappingCommunitiesViewer.generator.model.OptionsFilter;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author zinko
 */
public class OcvFilterCommunityUI extends javax.swing.JPanel{

    private OcvFilterCustomCommunity filter;
    OptionsFilter optionsFilterCommunity = new OptionsFilter();
    
    /**
     * Creates new form OcvFilterNode
     */
    public OcvFilterCommunityUI() {
        initComponents();
    }

    public void setup(OcvFilterCustomCommunity f) {
        this.filter = f;        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlFiltros = new javax.swing.JTabbedPane();
        pnlComunidades = new javax.swing.JPanel();
        lblMasNodos = new javax.swing.JLabel();
        txtMasNodos = new javax.swing.JTextField();
        lblMenosNodos = new javax.swing.JLabel();
        txtMenosNodos = new javax.swing.JTextField();
        btnFiltros = new javax.swing.JButton();
        btnCleanFiltros = new javax.swing.JButton();

        org.openide.awt.Mnemonics.setLocalizedText(lblMasNodos, org.openide.util.NbBundle.getMessage(OcvFilterCommunityUI.class, "OcvFilterCommunityUI.lblMasNodos.text")); // NOI18N

        txtMasNodos.setText(org.openide.util.NbBundle.getMessage(OcvFilterCommunityUI.class, "OcvFilterCommunityUI.txtMasNodos.text")); // NOI18N
        txtMasNodos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMasNodosKeyTyped(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(lblMenosNodos, org.openide.util.NbBundle.getMessage(OcvFilterCommunityUI.class, "OcvFilterCommunityUI.lblMenosNodos.text")); // NOI18N

        txtMenosNodos.setText(org.openide.util.NbBundle.getMessage(OcvFilterCommunityUI.class, "OcvFilterCommunityUI.txtMenosNodos.text")); // NOI18N
        txtMenosNodos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMenosNodosKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout pnlComunidadesLayout = new javax.swing.GroupLayout(pnlComunidades);
        pnlComunidades.setLayout(pnlComunidadesLayout);
        pnlComunidadesLayout.setHorizontalGroup(
            pnlComunidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlComunidadesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlComunidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblMasNodos)
                    .addComponent(lblMenosNodos))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 67, Short.MAX_VALUE)
                .addGroup(pnlComunidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtMasNodos, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                    .addComponent(txtMenosNodos))
                .addContainerGap())
        );
        pnlComunidadesLayout.setVerticalGroup(
            pnlComunidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlComunidadesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlComunidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMasNodos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMasNodos))
                .addGap(18, 18, 18)
                .addGroup(pnlComunidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMenosNodos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMenosNodos))
                .addContainerGap(103, Short.MAX_VALUE))
        );

        pnlFiltros.addTab(org.openide.util.NbBundle.getMessage(OcvFilterCommunityUI.class, "OcvFilterCommunityUI.pnlComunidades.TabConstraints.tabTitle"), pnlComunidades); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(btnFiltros, org.openide.util.NbBundle.getMessage(OcvFilterCommunityUI.class, "OcvFilterCommunityUI.btnFiltros.text")); // NOI18N
        btnFiltros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFiltrosActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(btnCleanFiltros, org.openide.util.NbBundle.getMessage(OcvFilterCommunityUI.class, "OcvFilterCommunityUI.btnCleanFiltros.text")); // NOI18N
        btnCleanFiltros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCleanFiltrosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnlFiltros, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnCleanFiltros)
                        .addGap(18, 18, 18)
                        .addComponent(btnFiltros)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlFiltros, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnFiltros)
                    .addComponent(btnCleanFiltros))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnFiltrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFiltrosActionPerformed
        List<FiltersValues> filtroComunidades = validarFiltrosComunidades();
    
    
        if(filtroComunidades.isEmpty()){
            JOptionPane.showMessageDialog(this, "No hay filtros por aplicar", "ERROR", JOptionPane.ERROR_MESSAGE);
        } else {
            filter.setCommunitiesFilter(filtroComunidades);
            filter.setOptionsFilterCommunity(optionsFilterCommunity);
        }
    }//GEN-LAST:event_btnFiltrosActionPerformed

    private void btnCleanFiltrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCleanFiltrosActionPerformed
        txtMasNodos.setText("");
        txtMenosNodos.setText("");
    }//GEN-LAST:event_btnCleanFiltrosActionPerformed

    private void txtMenosNodosKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMenosNodosKeyTyped
        char c = evt.getKeyChar();
        if (!(Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE))) {
            getToolkit().beep();
            JOptionPane.showMessageDialog(null,"No puede ingresar letras!!!","Ventana Error Datos",JOptionPane.ERROR_MESSAGE);
            evt.consume();
        }
    }//GEN-LAST:event_txtMenosNodosKeyTyped

    private void txtMasNodosKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMasNodosKeyTyped
        char c = evt.getKeyChar();
        if (!(Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE))) {
            getToolkit().beep();
            JOptionPane.showMessageDialog(null,"No puede ingresar letras!!!","Ventana Error Datos",JOptionPane.ERROR_MESSAGE);
            evt.consume();
        }
    }//GEN-LAST:event_txtMasNodosKeyTyped

    public List<FiltersValues> validarFiltrosComunidades(){
        List<FiltersValues> cfilters = new ArrayList<>();
        //Comunidades
        String masNodos = txtMasNodos.getText();
        String menosNodos = txtMenosNodos.getText();
        
        if(!masNodos.equals("")){
            FiltersValues cf = new FiltersValues();
            cf.setId(0);
            cf.setValue(masNodos);
            cfilters.add(cf);
            optionsFilterCommunity.setOption1(1);
        }else if(masNodos.equals("")){
            FiltersValues cf = new FiltersValues();
            cf.setId(3);
            cf.setValue("NOT VALUE");
            cfilters.add(cf);
            optionsFilterCommunity.setOption1(0);
        }
        if(!menosNodos.equals("")){
            FiltersValues cf = new FiltersValues();
            cf.setId(1);
            cf.setValue(menosNodos);
            cfilters.add(cf);
            optionsFilterCommunity.setOption2(1);
        }else if(menosNodos.equals("")){
            FiltersValues cf = new FiltersValues();
            cf.setId(3);
            cf.setValue("NOT VALUE");
            cfilters.add(cf);
            optionsFilterCommunity.setOption2(0);
        }
        return cfilters;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCleanFiltros;
    private javax.swing.JButton btnFiltros;
    private javax.swing.JLabel lblMasNodos;
    private javax.swing.JLabel lblMenosNodos;
    private javax.swing.JPanel pnlComunidades;
    private javax.swing.JTabbedPane pnlFiltros;
    private javax.swing.JTextField txtMasNodos;
    private javax.swing.JTextField txtMenosNodos;
    // End of variables declaration//GEN-END:variables

}
